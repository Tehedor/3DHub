{"ast":null,"code":"var _jsxFileName = \"/home/sergio/Documents/fronted/projectfronted/src/SearchPrinter.js\",\n  _s = $RefreshSig$();\nimport { Button, Row, Col, InputGroup, Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport Lista from './ImpresorasLista';\nimport CONFIG from './config/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchPage(props) {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [printers, setprinters] = useState(props.theprinters);\n\n  // Función que descarga las impresoras, en función de la localización en la que se encuentra\n  const download = async () => {\n    let downloadprinters;\n    // Coordenadas de Madrid para que sean por defecto \n    const latitude = 40.4167;\n    const longitude = -3.70325;\n\n    // Poner la manerad para solicitar las impresoras en función de la localizaciónSs\n    if (CONFIG.use_server) {\n      try {\n        if (props.isGeolocationEnabled || !props.queryUbica === \"\") {\n          if (!props.queryUbica === \"\") {\n            // api que me permita sacar latitud y longitud de la ubicación a partir de la query \n          } else {\n            latitude = coords.latitude;\n            longitude = coords.longitude;\n          }\n        }\n        let queryparams = \"?lat=\" + latitude + \"&lon=\" + longitude;\n        const response = await fetch(`${SERVER_URL}${queryparams}`);\n        const data = await response.json();\n        downloadprinters = data;\n      } catch (error) {\n        // setResultados(\n        //   { \"cod\": error.cod, \"message\": cod.message}\n        // );\n      }\n    } else {\n      downloadprinters = printersexample;\n    }\n    setThePrinters(downloadprinters);\n  };\n\n  // Efecto que se ejecuta al cargar la página\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData() {\n      await download();\n      setTimeout(() => {\n        setLoading(false);\n      }, 800);\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"cat\\xE1logo\",\n      children: \"impresoras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Lista, {\n        printers: printers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(SearchPage, \"zOJ9DHwYe1B0QqpI/CpUu8e6W00=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["Button","Row","Col","InputGroup","Form","useEffect","useState","Lista","CONFIG","jsxDEV","_jsxDEV","SearchPage","props","_s","query","setQuery","printers","setprinters","theprinters","download","downloadprinters","latitude","longitude","use_server","isGeolocationEnabled","queryUbica","coords","queryparams","response","fetch","SERVER_URL","data","json","error","printersexample","setThePrinters","setLoading","fetchData","setTimeout","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sergio/Documents/fronted/projectfronted/src/SearchPrinter.js"],"sourcesContent":["import { Button , Row, Col, InputGroup, Form} from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Lista from './ImpresorasLista';\r\nimport CONFIG from './config/config';\r\n\r\nexport default function SearchPage(props) {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [printers, setprinters] = useState(props.theprinters);\r\n    \r\n\r\n      // Función que descarga las impresoras, en función de la localización en la que se encuentra\r\n  const download = async () => {\r\n    let downloadprinters;\r\n    // Coordenadas de Madrid para que sean por defecto \r\n    const latitude=40.4167;\r\n    const longitude=-3.70325;  \r\n\r\n    // Poner la manerad para solicitar las impresoras en función de la localizaciónSs\r\n    if(CONFIG.use_server){\r\n      try {\r\n        if(props.isGeolocationEnabled || !props.queryUbica===\"\"){\r\n          if (!props.queryUbica===\"\"){\r\n            // api que me permita sacar latitud y longitud de la ubicación a partir de la query \r\n          }else{\r\n            latitude=coords.latitude;\r\n            longitude=coords.longitude;\r\n          }\r\n        }\r\n        let queryparams =  \"?lat=\" + latitude + \"&lon=\" + longitude;\r\n        const response = await fetch(`${SERVER_URL}${queryparams}`);\r\n        const data = await response.json();         \r\n        downloadprinters = data;\r\n      } catch (error) {\r\n        // setResultados(\r\n        //   { \"cod\": error.cod, \"message\": cod.message}\r\n        // );\r\n      }\r\n    }else{\r\n      downloadprinters=printersexample;\r\n    }\r\n    setThePrinters(downloadprinters);\r\n  }\r\n\r\n  // Efecto que se ejecuta al cargar la página\r\n  useEffect(() => {\r\n    setLoading(true);\r\n      async function fetchData() {\r\n        await download();\r\n       setTimeout(()=>{\r\n          setLoading(false);\r\n        },800);\t\t\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2 id=\"catálogo\">impresoras</h2> \r\n            {/* <Row>\r\n                <Col> \r\n                    <h5>Buscar</h5>\r\n                    <Row>\r\n                        <InputGroup style={{width: \"80%\",  margin: '0 auto'}} >\r\n                            <Form.Control id='filtro' type=\"text\" value={query} onChange={(e) => setQuery(e.target.value)}/>\r\n                        </InputGroup>   \r\n                    </Row>\r\n                    <Row>\r\n                        <Button id=\"buscador\" variant=\"secondary\"  onClick={filter} style={{width: \"100px\",  margin: '0 auto',marginTop: '5px'}} >Buscador</Button>{' '}\r\n                    </Row>\r\n                    </Col>\r\n                <Col>\r\n                    <Filtrar categorias={categ} setprinters={setprinters} theprinters={props.theprinters} /> \r\n                </Col>\r\n            </Row> */}\r\n            <Row>\r\n                <Lista printers={printers} />\r\n            </Row>   \r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAGC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAEC,IAAI,QAAO,iBAAiB;AACpE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,MAAM,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAACM,KAAK,CAACM,WAAW,CAAC;;EAGzD;EACJ,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAIC,gBAAgB;IACpB;IACA,MAAMC,QAAQ,GAAC,OAAO;IACtB,MAAMC,SAAS,GAAC,CAAC,OAAO;;IAExB;IACA,IAAGd,MAAM,CAACe,UAAU,EAAC;MACnB,IAAI;QACF,IAAGX,KAAK,CAACY,oBAAoB,IAAI,CAACZ,KAAK,CAACa,UAAU,KAAG,EAAE,EAAC;UACtD,IAAI,CAACb,KAAK,CAACa,UAAU,KAAG,EAAE,EAAC;YACzB;UAAA,CACD,MAAI;YACHJ,QAAQ,GAACK,MAAM,CAACL,QAAQ;YACxBC,SAAS,GAACI,MAAM,CAACJ,SAAS;UAC5B;QACF;QACA,IAAIK,WAAW,GAAI,OAAO,GAAGN,QAAQ,GAAG,OAAO,GAAGC,SAAS;QAC3D,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,UAAW,GAAEH,WAAY,EAAC,CAAC;QAC3D,MAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCZ,gBAAgB,GAAGW,IAAI;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd;QACA;QACA;MAAA;IAEJ,CAAC,MAAI;MACHb,gBAAgB,GAACc,eAAe;IAClC;IACAC,cAAc,CAACf,gBAAgB,CAAC;EAClC,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd+B,UAAU,CAAC,IAAI,CAAC;IACd,eAAeC,SAASA,CAAA,EAAG;MACzB,MAAMlB,QAAQ,CAAC,CAAC;MACjBmB,UAAU,CAAC,MAAI;QACZF,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,EAAC,GAAG,CAAC;IACV;IACAC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAGJ,oBACI3B,OAAA;IAAA6B,QAAA,gBACI7B,OAAA;MAAI8B,EAAE,EAAC,aAAU;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAiBjClC,OAAA,CAACT,GAAG;MAAAsC,QAAA,eACA7B,OAAA,CAACH,KAAK;QAACS,QAAQ,EAAEA;MAAS;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC/B,EAAA,CA3EuBF,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}