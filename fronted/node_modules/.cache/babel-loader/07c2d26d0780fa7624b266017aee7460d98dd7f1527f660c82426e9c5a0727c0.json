{"ast":null,"code":"var _jsxFileName = \"/home/sergio/Documents/fronted/projectfronted/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport CONFIG from './config/config.js';\n\n// Componenetes vistas de react\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport SearchPage from './SearchPage';\nimport Location from './Location';\nimport Error from './Error';\nimport FooterSection from './FooterSection';\n\n// Dependencias externas\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useGeolocated } from \"react-geolocated\";\n\n// Funcionalidades de react\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Routes, Navigation } from 'react-router-dom';\n// import {Route, Routes, Navigation } from 'react-router-dom';\n\n// Importar json de pruebas para el fronted\nimport { printersexample } from './constants/printers';\n\n// Pruebas, habrá que ajustarlo para mandar la infomación desde el backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = CONFIG.server_url;\nfunction App() {\n  _s();\n  // Estado en el que se alamcenan las impresoras\n  const [theprinters, setThePrinters] = useState();\n\n  // Estado en el que muestra el spinner si esta cargando\n  const [loading, setLoading] = useState(true);\n\n  // Estado para el login del diseañdor\n  const [loginDiseñador, setLoginDiseñador] = useState(false);\n\n  // Estado para el login del fabricante\n  const [loginFabricante, setLoginFabricante] = useState(false);\n\n  // Control de Roll\n  const [roll, setRoll] = useState(\"diseñador\");\n  // const [roll, setRoll] = useState(null);\n\n  // Variable que guara la localización en la que se encuentra el diseñdor\n  const [ubicacion, setubicacion] = useState(\"Madrid\");\n\n  // Contenido de la barra de busqueda\n  const [query, setQuery] = useState(\"\");\n\n  // Contenido de la barra de ubicación\n  const [queryUbica, setQueryUbica] = useState(\"\");\n\n  // Localizacion usuario\n  // https://www.npmjs.com/package/react-geolocated?activeTab=readme\n  const {\n    coords,\n    isGeolocationAvailable,\n    isGeolocationEnabled\n  } = useGeolocated({\n    positionOptions: {\n      enableHighAccuracy: false\n    },\n    userDecisionTimeout: 5000\n  });\n\n  // Función que descarga las impresoras, en función de la localización en la que se encuentra\n  const download = async () => {\n    let downloadprinters;\n    // Coordenadas de Madrid para que sean por defecto \n    const latitude = 40.4167;\n    const longitude = -3.70325;\n\n    // Poner la manerad para solicitar las impresoras en función de la localizaciónSs\n    if (CONFIG.use_server) {\n      try {\n        if (isGeolocationEnabled || !queryUbica === \"\") {\n          if (!queryUbica === \"\") {\n            // api que me permita sacar latitud y longitud de la ubicación a partir de la query \n          } else {\n            latitude = coords.latitude;\n            longitude = coords.longitude;\n          }\n        }\n        let queryparams = \"?lat=\" + latitude + \"&lon=\" + longitude;\n        const response = await fetch(`${SERVER_URL}${queryparams}`);\n        const data = await response.json();\n        downloadprinters = data;\n      } catch (error) {\n        // setResultados(\n        //   { \"cod\": error.cod, \"message\": cod.message}\n        // );\n      }\n    } else {\n      downloadprinters = printersexample;\n    }\n    setThePrinters(downloadprinters);\n  };\n\n  // Efecto que se ejecuta al cargar la página\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData() {\n      await download();\n      setTimeout(() => {\n        setLoading(false);\n      }, 800);\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n        roll: roll,\n        query: query,\n        setQuery: setQuery,\n        queryUbica: queryUbica,\n        setQueryUbica: setQueryUbica\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"loading\",\n        src: process.env.PUBLIC_URL + \"/cxyduck.gif\",\n        className: \"spinner\",\n        alt: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(SearchPage, {\n            theprinters: theprinters.printers,\n            setThePrinters: setThePrinters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/printers/:printerId\",\n          element: /*#__PURE__*/_jsxDEV(Location, {\n            theprinters: theprinters.printers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/*\",\n          element: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PXiAx8ABKNoZaxjgFL/e4TRv4wo=\", false, function () {\n  return [useGeolocated];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","CONFIG","NavBar","Header","SearchPage","Location","Error","FooterSection","useGeolocated","useState","useEffect","BrowserRouter","Route","Routes","Navigation","printersexample","jsxDEV","_jsxDEV","SERVER_URL","server_url","App","_s","theprinters","setThePrinters","loading","setLoading","loginDiseñador","setLoginDiseñador","loginFabricante","setLoginFabricante","roll","setRoll","ubicacion","setubicacion","query","setQuery","queryUbica","setQueryUbica","coords","isGeolocationAvailable","isGeolocationEnabled","positionOptions","enableHighAccuracy","userDecisionTimeout","download","downloadprinters","latitude","longitude","use_server","queryparams","response","fetch","data","json","error","fetchData","setTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","src","process","env","PUBLIC_URL","alt","path","element","printers","_c","$RefreshReg$"],"sources":["/home/sergio/Documents/fronted/projectfronted/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport CONFIG from './config/config.js';\n\n\n// Componenetes vistas de react\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport SearchPage from './SearchPage';\nimport Location from './Location';\nimport Error from './Error';\nimport FooterSection from './FooterSection';\n\n// Dependencias externas\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useGeolocated} from \"react-geolocated\";\n\n\n// Funcionalidades de react\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter,Route, Routes, Navigation } from 'react-router-dom';\n// import {Route, Routes, Navigation } from 'react-router-dom';\n\n// Importar json de pruebas para el fronted\nimport {printersexample} from './constants/printers';\n\n\n// Pruebas, habrá que ajustarlo para mandar la infomación desde el backend\nconst SERVER_URL = CONFIG.server_url;\n\nfunction App() {\n\n  // Estado en el que se alamcenan las impresoras\n  const [theprinters, setThePrinters] = useState();\n\n  // Estado en el que muestra el spinner si esta cargando\n  const [loading, setLoading] = useState(true);\n \n  // Estado para el login del diseañdor\n  const [loginDiseñador, setLoginDiseñador] = useState(false);\n  \n  // Estado para el login del fabricante\n  const [loginFabricante, setLoginFabricante] = useState(false);\n\n  // Control de Roll\n  const [roll, setRoll] = useState(\"diseñador\");\n  // const [roll, setRoll] = useState(null);\n\n  // Variable que guara la localización en la que se encuentra el diseñdor\n  const [ubicacion, setubicacion] = useState(\"Madrid\");\n\n  // Contenido de la barra de busqueda\n  const [query, setQuery] = useState(\"\");\n\n  // Contenido de la barra de ubicación\n  const [queryUbica, setQueryUbica] = useState(\"\");\n  \n  // Localizacion usuario\n  // https://www.npmjs.com/package/react-geolocated?activeTab=readme\n  const { coords, isGeolocationAvailable, isGeolocationEnabled } =\n    useGeolocated({\n        positionOptions: {\n            enableHighAccuracy: false,\n        },\n        userDecisionTimeout: 5000,\n    });\n\n\n\n  // Función que descarga las impresoras, en función de la localización en la que se encuentra\n  const download = async () => {\n    let downloadprinters;\n    // Coordenadas de Madrid para que sean por defecto \n    const latitude=40.4167;\n    const longitude=-3.70325;  \n\n    // Poner la manerad para solicitar las impresoras en función de la localizaciónSs\n    if(CONFIG.use_server){\n      try {\n        if(isGeolocationEnabled || !queryUbica===\"\"){\n          if (!queryUbica===\"\"){\n            // api que me permita sacar latitud y longitud de la ubicación a partir de la query \n          }else{\n            latitude=coords.latitude;\n            longitude=coords.longitude;\n          }\n        }\n        let queryparams =  \"?lat=\" + latitude + \"&lon=\" + longitude;\n        const response = await fetch(`${SERVER_URL}${queryparams}`);\n        const data = await response.json();         \n        downloadprinters = data;\n      } catch (error) {\n        // setResultados(\n        //   { \"cod\": error.cod, \"message\": cod.message}\n        // );\n      }\n    }else{\n      downloadprinters=printersexample;\n    }\n    setThePrinters(downloadprinters);\n  }\n\n  // Efecto que se ejecuta al cargar la página\n  useEffect(() => {\n    setLoading(true);\n      async function fetchData() {\n        await download();\n       setTimeout(()=>{\n          setLoading(false);\n        },800);\t\t\n    }\n    fetchData();\n  }, []);\n\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header/>\n        <NavBar roll={roll} query={query} setQuery={setQuery} queryUbica={queryUbica} setQueryUbica={setQueryUbica}/>\n        {loading ? <img id=\"loading\" src={process.env.PUBLIC_URL + \"/cxyduck.gif\"} className=\"spinner\" alt=\"spinner\" />:\n          <Routes>\n            <Route path=\"/\" element={<SearchPage theprinters={theprinters.printers} setThePrinters={setThePrinters} />} />\n            <Route path=\"/printers/:printerId\" element={<Location theprinters={theprinters.printers}/>}/> \n            <Route path=\"/*\" element={<Error/>}/>\n          </Routes>\n        }\n         \n        \n      </div>\n      <FooterSection/>\n      \n    </BrowserRouter>\n    \n  ); \n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}